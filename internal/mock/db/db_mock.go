// Code generated by MockGen. DO NOT EDIT.
// Source: ./db/interface.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	reflect "reflect"

	message "github.com/albertsundjaja/order_book/internal/message"
	gomock "github.com/golang/mock/gomock"
)

// MockIDbOrderBook is a mock of IDbOrderBook interface.
type MockIDbOrderBook struct {
	ctrl     *gomock.Controller
	recorder *MockIDbOrderBookMockRecorder
}

// MockIDbOrderBookMockRecorder is the mock recorder for MockIDbOrderBook.
type MockIDbOrderBookMockRecorder struct {
	mock *MockIDbOrderBook
}

// NewMockIDbOrderBook creates a new mock instance.
func NewMockIDbOrderBook(ctrl *gomock.Controller) *MockIDbOrderBook {
	mock := &MockIDbOrderBook{ctrl: ctrl}
	mock.recorder = &MockIDbOrderBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDbOrderBook) EXPECT() *MockIDbOrderBookMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockIDbOrderBook) AddOrder(arg0 message.MessageAdded) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockIDbOrderBookMockRecorder) AddOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockIDbOrderBook)(nil).AddOrder), arg0)
}

// DeleteOrder mocks base method.
func (m *MockIDbOrderBook) DeleteOrder(arg0 message.MessageDeleted) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockIDbOrderBookMockRecorder) DeleteOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockIDbOrderBook)(nil).DeleteOrder), arg0)
}

// ExecuteOrder mocks base method.
func (m *MockIDbOrderBook) ExecuteOrder(arg0 message.MessageExecuted) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteOrder", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteOrder indicates an expected call of ExecuteOrder.
func (mr *MockIDbOrderBookMockRecorder) ExecuteOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteOrder", reflect.TypeOf((*MockIDbOrderBook)(nil).ExecuteOrder), arg0)
}

// PrintDepth mocks base method.
func (m *MockIDbOrderBook) PrintDepth(symbol [3]byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintDepth", symbol)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrintDepth indicates an expected call of PrintDepth.
func (mr *MockIDbOrderBookMockRecorder) PrintDepth(symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintDepth", reflect.TypeOf((*MockIDbOrderBook)(nil).PrintDepth), symbol)
}

// UpdateOrder mocks base method.
func (m *MockIDbOrderBook) UpdateOrder(arg0 message.MessageUpdated) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockIDbOrderBookMockRecorder) UpdateOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockIDbOrderBook)(nil).UpdateOrder), arg0)
}
